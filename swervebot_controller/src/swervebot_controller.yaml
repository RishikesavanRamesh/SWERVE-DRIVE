# Copyright (c) 20224 Stogl Robotics Consulting UG (haftungsbeschr√§nkt)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Source of this file are templates in
# [RosTeamWorkspace](https://github.com/StoglRobotics/ros_team_workspace) repository.
#

swervebot_controller:

  wheel_modules: {
    type: string_array,
    default_value: [],
    description: "Names of wheel modules in the swerve module",
  }

  direction_modules: {
    type: string_array,
    default_value: [],
    description: "Names of direction modules in the swerve module",
  }

  x_position_of_modules: {
    type: double_array,
    default_value: [0.0, 0.0],
    description: "Swerve modules x position values from robot center",
  }

  y_position_of_modules: {
    type: double_array,
    default_value: [0.0, 0.0],
    description: "Swerve modules y position value from robot center",
  }

  set_constant_wheel_radius: {
    type: bool,
    default_value: true,
    description:  "If set true, all modules will have same wheel radius",
  }

  constant_wheel_radius: {
    type: double,
    default_value: 0.0, #meters
    description:  "Wheel radius in meters",
    validation: {
      gt<>: [0.0]
    }
  }

  wheel_radius_multiplier: {
    type: double,
    default_value: 1.0,
    description: "Correction factor when radius of wheels differs from the nominal value in ``constant_wheel_radius`` parameter.",
  }

  wheel_radii: {
    type: double_array,
    default_value: [0.0, 0.0], #meters
    description: "Different wheel radii of swerve modules"
  }

  wheel_radii_multiplier: {
    type: double_array,
    default_value: [1.0, 1.0],
    description: "Correction factor when radius of wheels differs from the nominal value in ``wheel_radii`` parameter.",
  }

  tf_frame_prefix_enable: {
    type: bool,
    default_value: true,
    description:  "Enables or disables appending tf_prefix to tf frame id's.",
  }
  tf_frame_prefix: {
    type: string,
    default_value: "",
    description:  "(optional) Prefix to be appended to the tf frames, will be added to odom_id and base_frame_id before publishing. If the parameter is empty, controller's namespace will be used.",
  }
  odom_frame_id: {
    type: string,
    default_value: "odom",
    description:  "Name of the frame for odometry. This frame is parent of ``base_frame_id`` when controller publishes odometry.",
  }
  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Name of the robot's base frame that is child of the odometry frame.",
  }
  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the pose. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the speed. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  open_loop: {
    type: bool,
    default_value: false,
    description: "If set to true the odometry of the robot will be calculated from the commanded values and not from feedback.",
  }
  position_feedback: {
    type: bool,
    default_value: true,
    description: "Is there position feedback from hardware.",
  }
  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publish transformation between ``odom_frame_id`` and ``base_frame_id``.",
  }
  cmd_vel_timeout: {
    type: double,
    default_value: 0.5, # seconds
    description: "Timeout in seconds, after which input command on ``cmd_vel`` topic is considered staled.",
  }
  publish_limited_velocity: {
    type: bool,
    default_value: false,
    description: "Publish limited velocity value.",
  }
  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "Size of the rolling window for calculation of mean velocity use in odometry.",
  }
  use_stamped_vel: {
    type: bool,
    default_value: true,
    description: "Use stamp from input velocity message to calculate how old the command actually is.",
  }
  publish_rate: {
    type: double,
    default_value: 50.0, # Hz
    description: "Publishing rate (Hz) of the odometry and TF messages.",
  }
  linear:
    x:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }
    y:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }
  angular:
    z:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }